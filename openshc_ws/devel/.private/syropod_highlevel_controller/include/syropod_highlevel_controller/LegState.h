// Generated by gencpp from file syropod_highlevel_controller/LegState.msg
// DO NOT EDIT!


#ifndef SYROPOD_HIGHLEVEL_CONTROLLER_MESSAGE_LEGSTATE_H
#define SYROPOD_HIGHLEVEL_CONTROLLER_MESSAGE_LEGSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/TwistStamped.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace syropod_highlevel_controller
{
template <class ContainerAllocator>
struct LegState_
{
  typedef LegState_<ContainerAllocator> Type;

  LegState_()
    : header()
    , name()
    , walker_tip_pose()
    , target_tip_pose()
    , poser_tip_pose()
    , model_tip_pose()
    , actual_tip_pose()
    , model_tip_velocity()
    , joint_positions()
    , joint_velocities()
    , joint_efforts()
    , stance_progress(0.0)
    , swing_progress(0.0)
    , time_to_swing_end(0.0)
    , pose_delta()
    , auto_pose()
    , tip_force()
    , admittance_delta()
    , virtual_stiffness(0.0)  {
    }
  LegState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , walker_tip_pose(_alloc)
    , target_tip_pose(_alloc)
    , poser_tip_pose(_alloc)
    , model_tip_pose(_alloc)
    , actual_tip_pose(_alloc)
    , model_tip_velocity(_alloc)
    , joint_positions(_alloc)
    , joint_velocities(_alloc)
    , joint_efforts(_alloc)
    , stance_progress(0.0)
    , swing_progress(0.0)
    , time_to_swing_end(0.0)
    , pose_delta(_alloc)
    , auto_pose(_alloc)
    , tip_force(_alloc)
    , admittance_delta(_alloc)
    , virtual_stiffness(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _walker_tip_pose_type;
  _walker_tip_pose_type walker_tip_pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _target_tip_pose_type;
  _target_tip_pose_type target_tip_pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _poser_tip_pose_type;
  _poser_tip_pose_type poser_tip_pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _model_tip_pose_type;
  _model_tip_pose_type model_tip_pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _actual_tip_pose_type;
  _actual_tip_pose_type actual_tip_pose;

   typedef  ::geometry_msgs::TwistStamped_<ContainerAllocator>  _model_tip_velocity_type;
  _model_tip_velocity_type model_tip_velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_positions_type;
  _joint_positions_type joint_positions;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_velocities_type;
  _joint_velocities_type joint_velocities;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_efforts_type;
  _joint_efforts_type joint_efforts;

   typedef double _stance_progress_type;
  _stance_progress_type stance_progress;

   typedef double _swing_progress_type;
  _swing_progress_type swing_progress;

   typedef double _time_to_swing_end_type;
  _time_to_swing_end_type time_to_swing_end;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_delta_type;
  _pose_delta_type pose_delta;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _auto_pose_type;
  _auto_pose_type auto_pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _tip_force_type;
  _tip_force_type tip_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _admittance_delta_type;
  _admittance_delta_type admittance_delta;

   typedef double _virtual_stiffness_type;
  _virtual_stiffness_type virtual_stiffness;





  typedef boost::shared_ptr< ::syropod_highlevel_controller::LegState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::syropod_highlevel_controller::LegState_<ContainerAllocator> const> ConstPtr;

}; // struct LegState_

typedef ::syropod_highlevel_controller::LegState_<std::allocator<void> > LegState;

typedef boost::shared_ptr< ::syropod_highlevel_controller::LegState > LegStatePtr;
typedef boost::shared_ptr< ::syropod_highlevel_controller::LegState const> LegStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::syropod_highlevel_controller::LegState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::syropod_highlevel_controller::LegState_<ContainerAllocator1> & lhs, const ::syropod_highlevel_controller::LegState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.walker_tip_pose == rhs.walker_tip_pose &&
    lhs.target_tip_pose == rhs.target_tip_pose &&
    lhs.poser_tip_pose == rhs.poser_tip_pose &&
    lhs.model_tip_pose == rhs.model_tip_pose &&
    lhs.actual_tip_pose == rhs.actual_tip_pose &&
    lhs.model_tip_velocity == rhs.model_tip_velocity &&
    lhs.joint_positions == rhs.joint_positions &&
    lhs.joint_velocities == rhs.joint_velocities &&
    lhs.joint_efforts == rhs.joint_efforts &&
    lhs.stance_progress == rhs.stance_progress &&
    lhs.swing_progress == rhs.swing_progress &&
    lhs.time_to_swing_end == rhs.time_to_swing_end &&
    lhs.pose_delta == rhs.pose_delta &&
    lhs.auto_pose == rhs.auto_pose &&
    lhs.tip_force == rhs.tip_force &&
    lhs.admittance_delta == rhs.admittance_delta &&
    lhs.virtual_stiffness == rhs.virtual_stiffness;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::syropod_highlevel_controller::LegState_<ContainerAllocator1> & lhs, const ::syropod_highlevel_controller::LegState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace syropod_highlevel_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::syropod_highlevel_controller::LegState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::syropod_highlevel_controller::LegState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::syropod_highlevel_controller::LegState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dadda7ca412e345da1ddcca95ddf0ccc";
  }

  static const char* value(const ::syropod_highlevel_controller::LegState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdadda7ca412e345dULL;
  static const uint64_t static_value2 = 0xa1ddcca95ddf0cccULL;
};

template<class ContainerAllocator>
struct DataType< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "syropod_highlevel_controller/LegState";
  }

  static const char* value(const ::syropod_highlevel_controller::LegState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string name\n"
"\n"
"geometry_msgs/PoseStamped walker_tip_pose\n"
"geometry_msgs/PoseStamped target_tip_pose\n"
"geometry_msgs/PoseStamped poser_tip_pose\n"
"geometry_msgs/PoseStamped model_tip_pose\n"
"geometry_msgs/PoseStamped actual_tip_pose\n"
"\n"
"geometry_msgs/TwistStamped model_tip_velocity\n"
"\n"
"float64[] joint_positions\n"
"float64[] joint_velocities\n"
"float64[] joint_efforts\n"
"\n"
"float64 stance_progress\n"
"float64 swing_progress\n"
"\n"
"float64 time_to_swing_end\n"
"geometry_msgs/Pose pose_delta\n"
"\n"
"geometry_msgs/Pose auto_pose\n"
"\n"
"geometry_msgs/Vector3 tip_force\n"
"geometry_msgs/Vector3 admittance_delta\n"
"float64 virtual_stiffness\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistStamped\n"
"# A twist with reference coordinate frame and timestamp\n"
"Header header\n"
"Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::syropod_highlevel_controller::LegState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.walker_tip_pose);
      stream.next(m.target_tip_pose);
      stream.next(m.poser_tip_pose);
      stream.next(m.model_tip_pose);
      stream.next(m.actual_tip_pose);
      stream.next(m.model_tip_velocity);
      stream.next(m.joint_positions);
      stream.next(m.joint_velocities);
      stream.next(m.joint_efforts);
      stream.next(m.stance_progress);
      stream.next(m.swing_progress);
      stream.next(m.time_to_swing_end);
      stream.next(m.pose_delta);
      stream.next(m.auto_pose);
      stream.next(m.tip_force);
      stream.next(m.admittance_delta);
      stream.next(m.virtual_stiffness);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LegState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::syropod_highlevel_controller::LegState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::syropod_highlevel_controller::LegState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "walker_tip_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.walker_tip_pose);
    s << indent << "target_tip_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.target_tip_pose);
    s << indent << "poser_tip_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.poser_tip_pose);
    s << indent << "model_tip_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.model_tip_pose);
    s << indent << "actual_tip_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.actual_tip_pose);
    s << indent << "model_tip_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.model_tip_velocity);
    s << indent << "joint_positions[]" << std::endl;
    for (size_t i = 0; i < v.joint_positions.size(); ++i)
    {
      s << indent << "  joint_positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_positions[i]);
    }
    s << indent << "joint_velocities[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocities.size(); ++i)
    {
      s << indent << "  joint_velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocities[i]);
    }
    s << indent << "joint_efforts[]" << std::endl;
    for (size_t i = 0; i < v.joint_efforts.size(); ++i)
    {
      s << indent << "  joint_efforts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_efforts[i]);
    }
    s << indent << "stance_progress: ";
    Printer<double>::stream(s, indent + "  ", v.stance_progress);
    s << indent << "swing_progress: ";
    Printer<double>::stream(s, indent + "  ", v.swing_progress);
    s << indent << "time_to_swing_end: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_swing_end);
    s << indent << "pose_delta: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_delta);
    s << indent << "auto_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.auto_pose);
    s << indent << "tip_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.tip_force);
    s << indent << "admittance_delta: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.admittance_delta);
    s << indent << "virtual_stiffness: ";
    Printer<double>::stream(s, indent + "  ", v.virtual_stiffness);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYROPOD_HIGHLEVEL_CONTROLLER_MESSAGE_LEGSTATE_H
